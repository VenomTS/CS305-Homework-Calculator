namespace Calculator;

class Program
{
    static void Main(string[] args)
    {
        var calculator = new Calculator();
        
        // In case you want to test all of my test cases, just uncomment the following line
        // TestCases(calculator);

        while (true)
        {
            Console.WriteLine("Calculator Menu:\n" +
                              "1. Perform Arithmetic Calculation\n" +
                              "2. Perform Square Root Calculation\n" +
                              "3. View History\n" +
                              "4. Exit");
            var input = Console.ReadLine();
            var isValid = int.TryParse(input, out var result);
            if (!isValid || result < 1 || result > 4)
            {
                Console.WriteLine("Invalid Input, only numbers from 1 to 4 are acceptable!\n");
                continue;
            }
        
            if (result == 4)
            {
                Console.WriteLine("Goodbye!");
                break;
            }
            
        
            calculator.UseCalculator(result);
        }
    }
    
    private static void TestCases(Calculator calculator)
    {
        // All the test cases were generated by ChatGPT and all expected results were generated through Python's eval function
        VerifyBasicExpressionCalculator(calculator, "3 + 4 * 2 / (1 - 5) * 2 * 3", -9);
        VerifyBasicExpressionCalculator(calculator, "-10 + (-20) * 3 - (-5 * 2)", -60);
        VerifyBasicExpressionCalculator(calculator, "((-15 - 5) + -10) * (-2 + 6)", -120);
        VerifyBasicExpressionCalculator(calculator, "-(50 / (5 + 5)) + (-8) * (-3)", 19);
        VerifyBasicExpressionCalculator(calculator, "-(8 - 12) * (5 + -4) + -20 / -4", 9);
        VerifyBasicExpressionCalculator(calculator, "-10 + (-5) * (8 / (2 - -2))", -20);
        VerifyBasicExpressionCalculator(calculator, "((-(6 * 3)) + 10) - (-15 / 5)", -5);
        VerifyBasicExpressionCalculator(calculator, "((-(6 * -3)) + 10) - (-15 / 5)", 31);
        VerifyBasicExpressionCalculator(calculator, "(-(-(3 * 3)) * 3)", 27);
        VerifyBasicExpressionCalculator(calculator, "-(20 - (-5 * 2)) + (6 / -3)", -32);
        VerifyBasicExpressionCalculator(calculator, "-6 * (-3) + (-24 / (6 - -2)) - (-10)", 25);
        VerifyBasicExpressionCalculator(calculator, "-(36 / -6) + (8 * -3) - (-4)", -14);
        VerifyBasicExpressionCalculator(calculator, "-15 + (20 - -10) * (3 + -1)", 45);
        VerifyBasicExpressionCalculator(calculator, "-(100 / -5) - (-20 * -3) + 6", -34);
        VerifyBasicExpressionCalculator(calculator, "-10 * (-4) + -8 / (-2) - (5 - -5)", 34);
        VerifyBasicExpressionCalculator(calculator, "-(-50 + (10 / -2)) - (-20 * -5)", -45);
        VerifyBasicExpressionCalculator(calculator, "(-6 * -4) + (-30 / (5 - -5)) - -15", 36);
        VerifyBasicExpressionCalculator(calculator, "-50 + (-25 / 5) * (-8 - -2)", -20);
        VerifyBasicExpressionCalculator(calculator, "-(40 / (-5 + -3)) * (-10 / -2)", 25);
        VerifyBasicExpressionCalculator(calculator, "-10 + (-20 * (-5 + 8)) / (-3 - -1)", 20);
        VerifyBasicExpressionCalculator(calculator, "(-34) * 3", -102);
        VerifyBasicExpressionCalculator(calculator, "(25 + 15) / (10 - 5) * (6 - 4)", 16);
        VerifyBasicExpressionCalculator(calculator, "((50 - 20) / 10) + (8 * 3) - 12", 15);
        VerifyBasicExpressionCalculator(calculator, "(8 + (16 / 4)) * (9 - 7) - 10", 14);
        VerifyBasicExpressionCalculator(calculator, "((36 / 6) + 8) * (15 / 5) - 5", 37);
        VerifyBasicExpressionCalculator(calculator, "(72 / (6 * 3)) + (25 - (10 + 5))", 14);
        VerifyBasicExpressionCalculator(calculator, "((100 / (5 * 2)) - 8) * (12 / 4)", 6);
        VerifyBasicExpressionCalculator(calculator, "(15 + (20 / 4)) - (8 * 2) + 10", 14);
        VerifyBasicExpressionCalculator(calculator, "(60 / (5 * 2)) + ((16 - 4) / 4) * 3", 15);
        VerifyBasicExpressionCalculator(calculator, "((12 + 6) / (9 - 3)) * (8 - 6)", 6);
        VerifyBasicExpressionCalculator(calculator, "(50 - (25 / 5)) * (10 / (8 - 6))", 225);
        VerifyBasicExpressionCalculator(calculator, "-10 + 20 - (5 * 2)", 0);
        VerifyBasicExpressionCalculator(calculator, "-15 + (30 / 3) * 2", 5);
        VerifyBasicExpressionCalculator(calculator, "-8 + (4 * (6 - 3))", 4);
        VerifyBasicExpressionCalculator(calculator, "-20 + (50 / 5) - 6", -16);
        VerifyBasicExpressionCalculator(calculator, "-30 / (5 - 2) + (8 * 3)", 14);
        VerifyBasicExpressionCalculator(calculator, "-50 + (25 * 2) - (10 / 2)", -5);
        VerifyBasicExpressionCalculator(calculator, "-100 / (25 / 5) + (12 * 3)", 16);
        VerifyBasicExpressionCalculator(calculator, "-6 * (8 - 5) + 18 / 3", -12);
        VerifyBasicExpressionCalculator(calculator, "-24 / (8 - 4) + (20 - 15)", -1);
        VerifyBasicExpressionCalculator(calculator, "-40 + (60 / (5 + 5)) * 3", -22);
        VerifyBasicExpressionCalculator(calculator, "(25 - (3 * 2)) + (8 * 2) / 4 - 12", 11);
        VerifyBasicExpressionCalculator(calculator, "((10 + 5) * (6 / 2)) - (7 * 2) + 9", 40);
        VerifyBasicExpressionCalculator(calculator, "(45 / (6 + 3)) + (25 * 2) - 100 / (5 + 5)", 45);
        VerifyBasicExpressionCalculator(calculator, "(5 * (3 + 4)) - (8 * 3) / (2 - 1)", 11);
        VerifyBasicExpressionCalculator(calculator, "(10 + 5) * ((3 + 6) / 9) + 50", 65);
        VerifyBasicExpressionCalculator(calculator, "(((3 * 4) - 2) + (10 / 2)) * 2", 30);
        VerifyBasicExpressionCalculator(calculator, "100 + (50 * (2 - 5)) / 3 + 10", 60);
        VerifyBasicExpressionCalculator(calculator, "(3 + (2 * (5 + 3))) - (8 * 2) / 4", 15);
        VerifyBasicExpressionCalculator(calculator, "(25 - (-3 * 2)) + (8 * 2) / 4 - 12", 23);
        VerifyBasicExpressionCalculator(calculator, "-((10 + 5) * (6 / 2)) - (7 * 2) + 9", -50);
        VerifyBasicExpressionCalculator(calculator, "(45 / (6 + 3)) + (25 * -2) - 100 / (5 + 5)", -55);
        VerifyBasicExpressionCalculator(calculator, "(5 * (3 + 4)) - (8 * -3) / (2 - 1)", 59);
        VerifyBasicExpressionCalculator(calculator, "(10 + 5) * ((3 + 6) / 9) + -50", -35);
        VerifyBasicExpressionCalculator(calculator, "(((3 * 4) - 2) + (10 / 2)) * -2", -30);
        VerifyBasicExpressionCalculator(calculator, "100 + (50 * (2 - 5)) / -3 + 10", 160);
        VerifyBasicExpressionCalculator(calculator, "(3 + (2 * (5 + -3))) - (8 * -2) / 4", 11);
        VerifyBasicExpressionCalculator(calculator, "(25 - (-3 * 2)) + (8 * 2) / 4 - 12", 23);
        VerifyBasicExpressionCalculator(calculator, "-((10 + 5) * (6 / 2)) - (7 * 2) + -9", -68);
        VerifyBasicExpressionCalculator(calculator, "(45 / (6 + 3)) + (25 * -2) - 100 / (5 + 5)", -55);
        VerifyBasicExpressionCalculator(calculator, "(5 * (3 + 4)) - (8 * 3) / (-2 - 1)", 43);
        VerifyBasicExpressionCalculator(calculator, "(10 + 5) * ((3 + 6) / 9) + -50", -35);
        VerifyBasicExpressionCalculator(calculator, "(((3 * -4) - 2) + (10 / 2)) * -2", 18);
        VerifyBasicExpressionCalculator(calculator, "100 + (50 * (2 - 5)) / -3 + 10", 160);
        VerifyBasicExpressionCalculator(calculator, "(3 + (2 * (5 + -3))) - (8 * -2) / 4", 11);
        VerifyBasicExpressionCalculator(calculator, "(25 - (-3 * 2)) + (8 * 2) / 4 - 12", 23);
        VerifyBasicExpressionCalculator(calculator, "-((10 + 5) * (6 / 2)) - (7 * 2) + -68", -127);
    }

    private static void VerifyBasicExpressionCalculator(Calculator calculator, string expression, int expectedResult)
    {
        var result = calculator.CheckCalculateBasicExpression(expression);

        var msg = $"Expression: {expression} | Expected Result: {expectedResult} | Actual Result: {result} - ";

        Console.ForegroundColor = ConsoleColor.Gray;
        Console.Write(msg);
        if (result == expectedResult)
        {
            Console.ForegroundColor = ConsoleColor.DarkGreen;
            Console.WriteLine("PASSED");
            return;
        }
        Console.ForegroundColor = ConsoleColor.DarkRed;
        Console.WriteLine("FAILED");
    }
}